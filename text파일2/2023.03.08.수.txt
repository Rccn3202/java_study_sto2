2023.03.08.수


시작이 중요
요구사항 확인 제일 중요
규칙 반복 - 전산화

요구사항: 현행 시스템 분석, 요구사항 확인 등등

0 현행 시스템 파악
현행 시스템 파악 절차
소프트웨어 구성도

0라우터란?
컴퓨터 네트워크간에 데이터를 송수신하는 장치

0 아키텍쳐 구성도

www.dd.com 도메인주소
193.233.32.2 ip주소
-- DNS Domain ip주소로 도메인->ip 변경

현행 시스템 아키텍처 구성도 : 운영체제 종류, 적용 프레임워크, 계층별 적용 기술, 데이터 연동 방식, 데이터 저장소, 외부 시스템 연계방식 등등을 분석

분석한 결과를 활용 서식을 참조해 산출물 작성

프런트 엔드 프로세서에서 비지니스 레이어(진짜 처리)는 실제로 작동하는 것
VO는 프레젠테이션레이어(전처리)와 데이터 액세스 레이어를 연결
프레젠테이션 티어(view) 고객이 보는 것
프레지스턴스 티어(DBMS) DB관리자가 보는 것
파운데이션 레이어가 스프링

MVC(model view control) : 프로그램 구성

WAS:web application server 홈페이지를 돌려주는 서버

mongoDB,Mysql 많이 씀
---------------------------------------------
요구사항 정의

요구공학: 요구사항 정의,문서화,관리하는 프로세스
도출->분석->명세(소프트웨어 요구사항 명세서 등)->확인

개념 모델링
유스케이스 다이어그램
UML 표기법

프로토타이핑

p77 면담기록(회의록)~
요구사항명세서
유스케이스 명세서(예시 p49)

분석모델 검증

유스케이스 모델 검증
-액터 :
기능 구현에 관계되는 액터가 모두 도출되었는가?
회원/비회원
고객-주문 1 0..* : 고객한명-0개주문,주문1개,여러개 주문
-유스케이스 :

-유스케이스 명세서

분석클래스 스테레오타입
경계 ㅏㅇ 시트템과 외부 액터와의 상호작요을 담당하는 클래스
엔티티 으 시스템이 유지해야 하는 정보를 관리하는 기능을 담당하는 클래스
제어 ㅇ

현행 시스템 분석
요구사항 확인
분석모델 확인
================================================

1. p10
전자정부 프레임워크 계증
공통기반
화면처리
업무처리
데이터처리
연계통합
2.  14쪽
데이터베이스의 종류, 특징, 용도
3. 27쪽 표
요구사항 식별을 위해 고려해야 할 사항
신뢰도,성능,기술지원,주변기기,구축비용
4.  웹브라우저와 서버과의 관계도
https://velog.io/@jennyfromdeblock/%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0
5. 요구사항 확인 기법 46쪽
-요구사항 검토
6. 요구사항 개발 프로세스 42쪽
SWEBOK
7. 요구사항의 기술적 타당성 검토
성능 및 용량산정 적정성~~


==============================
웹페이지 만들 때
공통 css 있어야함/대표디자인-마크, 글자폰트, 대표적인 컬러색 등등
자바 스크립트........
내용 어케 바꿈? 포트폴리오용으로...
f12




-------
다형성에는 오버로딩과 오버라이딩 있다
-오버로딩과 오버라이딩의 특성,차이점 설명, 적절한 사례 예
-다형성 왜 필요? 다형성이 지원되지 않는다면 어떻게 됨? 사례

오버로딩
일반적으로 하나의 클래스 안에 같은 이름의 메서드를 정의하게 되면 에러가 발생합니다.)
정의: 자바의 한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메소드가 있더라도 매개변수의 개수 또는 타입이 다르면, 같은 이름을 사용해서 메소드를 정의할 수 있다.
주의 : 메소드의 이름이 같고, 매개변수의 개수나 타입이 달라야 한다. 주의할 점은 '리턴 값만' 다른 것은 오버로딩을 할 수 없다는 것이다.
예시1)
class OverloadingTest {

	public static void main(String[] args) {
		OverloadingMethods om = new OverloadingMethods();

		om.print();
		System.out.println(om.print(3));
		om.print("Hello!");
		System.out.println(om.print(4, 5));
	}
}

class OverloadingMethods {
	public void print() {
		System.out.println("오버로딩1");
	}

	String print(Integer a) {
		System.out.println("오버로딩2");
		return a.toString();
	}

	void print(String a) {
		System.out.println("오버로딩3");
		System.out.println(a);
	}

	String print(Integer a, Integer b) {
		System.out.println("오버로딩4");
		return a.toString() + b.toString();
	}

}
사용이유: 
1.같은 기능을 하는 메소드를 하나의 이름으로 사용할 수 있다
2.메소드의 이름을 절약할 수 있다.

오버라이딩
정의:부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의하는 것
메소드 이름, 파라미터 갯수나 타입 동일
주로 상위 클래스의 동작을 상속받은 하위클래스에서 변경하기 위해 사용
상속받은 메소드를 그대로 사용할 수도 있지만, 자식 클래스에서 상황에 맞게 변경해야하는 경우 오버라이딩할 필요가 생긴다.
조건:오버라이딩은 부모 클래스의 메소드를 재정의하는 것이므로, 자식 클래스에서는 오버라이딩하고자 하는 메소드의 이름, 매개변수, 리턴 값이 모두 같아야 한다. 
예시:
public class OverridingTest {

	public static void main(String[] args) {
		Person person = new Person();
		Child child = new Child();
		Senior senior = new Senior();
		
		person.cry();
		child.cry();
		senior.cry();
	}
}

class Person {
	void cry() {
		System.out.println("흑흑");
	}
}

class Child extends Person {
	@Override
	protected void cry() {
		System.out.println("잉잉");
	}
}

class Senior extends Person {
	@Override
	public void cry() {
		System.out.println("훌쩍훌쩍");
	}
}

프로그래머가 Person클래스의 cry메소드를 '흑흑'이라고 정의했다. 그런데 Child클래스와 Senior클래스를 만들면서 울음소리를 다르게 출력하고 싶은 것이다. 그래서 Chile클래스와 Senior클래스에서 부모의 메소드의 이름만 빌려와서 자기의 방식대로 '재정의'하였다. 이것이 오버라이딩이다.

접근 제어자를 다르게 설정해 놓은 것을 볼 수 있다. 오버라이딩에서 접근 제어자를 설정하는 규칙이 존재
1. 자식 클래스에서 오버라이딩하는 메소드의 접근 제어자는 부모 클래스보다 더 좁게 설정할 수 없다.
부모클래스의 접근제어자는 default로 설정되어 있다. 여기서 자식 클래스들은 default보다 같거나 더 넓은 범위의 접근제어자만 설정할 수 있으므로 default, protected, public 이 세 개의 접근 제어자는 사용이 가능
2.예외(Exception)는 부모 클래스의 메소드 보다 많이 선언할 수 없다.
부모 클래스에서 어떤 예외를 throws 한다고 하면, 자식 클래스에서는 그 예외보다 더 큰 범위의 예외를 throws할 수 없다는 것이다.
3. static메소드를 인스턴스의 메소드로 또는 그 반대로 바꿀 수 없다.
부모 클래스의 static메소드를 자식에서 같은 이름으로 정의할 수 있지만 이것은 다시 정의하는 것이 아니라 같은 이름의 static메소드를 새로 정의하는 것이다.


오버로딩과 오버라이딩
메소드 이름은 동일해야한다
~표~
구분               오버로딩      오버라이딩
메소드이름                동일
매개변수,타입   다름		   동일
리턴타입	         상관없음            동일
오버로딩 - 기존에 없는 새로운 메소드를 추가하는 것
모든 접근 제어자를 사용할 수 있다.
리턴형 달라도 된다
매개변수 달라야한다
같은 클래스 내에서 적용된다

오버라이딩 - 상속받은 메소드를 재정의 하는 것
부모클래스의 메소드의 접근 제어자보다 더 넓은 범위의 접근 제어자를 자식클래스의 메소드에서 설정할 수 있다
리턴형 동일해야함
매개변수 동일해야함
상속관계에서 적용된다




----------------------------------------

오버로드예시 작성
sum()
sum(int,int)
sum(double,double)
sum(int,int,int)

오버로드 함수 최소 3개이상,
메인함수에서 오버로드 각각의 오버로드 함수 호출 및 결과 확인 가능해야함



